h1. Configuration parameters

Configure your Play application by setting values for configuration keys in @conf/application.conf@ file.

The @play new@ command copies a default configuration file from the @$PLAY_HOME/resources/application-skel/conf@ directory.

See also:

* "Main concepts - the conf directory":main#conf
* "Managing application.conf in several environments":ids
* "Put your application in production":production

h2(#application). Application configuration


h3(#application.baseUrl). application.baseUrl

The application base URL used for reverse-resolving absolute URLs. This is used by the <code>@@{..}</code> template syntax and in Jobs, which do not have an inbound @Http.Request@), such as rendering e-mail. For example, for @dev@ mode:

bc. application.baseUrl=http://localhost:9000/

For @prod@ mode:

bc. %production%.application.baseUrl=http://www.yourdomain.com/


h3(#application.defaultCookieDomain). application.defaultCookieDomain

Enables session/cookie sharing between subdomains. For example, to make cookies valid for all domains ending with ‘.example.com’, e.g. @foo.example.com@ and @bar.example.com@:

bc. application.defaultCookieDomain=.example.com

Default: a cookie is only valid for a specific domain. 


h3(#application.langs). application.langs

Defines locales used by your application. You can then place localized messages in @conf/messages.{locale}@ files. The value is a comma-separated list of language codes, for example:

bc. application.langs=fr,en,ja


h3(#application.log). application.log

Specifies log level for your application. For example:

bc. application.log=INFO

See also: "Logging configuration":logs.


h3(#application.log.path). application.log.path

Path to a Log4J configuration file, to customise log output. If you do not specify a path, Play will load a @log4j.properties@ file in the @conf@ directory if present.

bc. application.log.path=/log4j.properties


h3(#application.log.system.out). application.log.system.out

bc. application.log.system.out=off


h3(#application.mode). application.mode

Application mode. For example:

bc. application.mode=dev

Values:

* @dev@ - enable instant reloading and other development help
* @prod@ - pre-compiles and caches Java sources and templates.


h3(#application.name). application.name

The application’s name, usually set by the @play new@ command.


h3(#application.secret). application.secret

The secret key is used to secure cryptographics functions, usually set by the @play new@ command. If you deploy your application to several instances be sure to use the same key.


h3(#application.session.cookie). application.session.cookie

Session cookie name. The cookies are not secured by default, only set it to true if you’re serving your pages through HTTPS. For example:

bc. application.session.cookie=PLAY

Default: sessions are written to the transient @PLAY_SESSION@ cookie.
 

h3(#application.session.maxAge). application.session.maxAge

Session time-out, i.e. the maximum age of the session cookie. If not set, the session expires when you close your web browser. For example, to set the session to one hour:

bc. application.session.maxAge=1h

Remember the session for one week:

bc. application.session.maxAge=7d 


h3(#application.session.secure). application.session.secure

bc. application.session.secure=false

bc. application.session.secure=true


h3(#application.web_encoding). application.web_encoding

The text encoding that Play uses when communicating with the web browser and for the "Web Service client":libs#WebServiceclient. You do not normally need to set this, since Play defaults to using @UTF-8@. For example:

bc. application.web_encoding=ISO-8859-1

Default: @UTF-8@

Changing @application.web_encoding@ affects the @charset@ part of the @Content-type@ HTTP header. It also affects which encoding is used when transmitting rendered dynamic results, but it **does not** affect the bytes sent when Play serves static content: So, if you have modified the default response encoding and you have static text-files (in the @public/@ folder) that contain special characters, you must make sure that these files are stored according to the specified encoding. All other files should be stored in UTF-8.


h2(#attachments). Attachments


h3(#attachments.path). attachments.path

Store path for Blob content. For example:

bc. attachments.path=data/attachments


h2(#date). Date formats


h3(#date.format). date.format

Sets the default date format, using a @java.text.SimpleDateFormat@ pattern. For example:

bc. date.format=yyyy-MM-dd

You can also set a different date format for specific languages that you have configured with "application.langs":#application.langs, for example:

bc. date.format.fr=dd-MM-yyyy


h2(#db). Database configuration

h3(#db). db

Database engine configuration. To quickly set up a development database use a transient in memory database (H2 in memory):

bc. db=mem

For a simple file written database (H2 file stored):
 
bc. db=fs

For a local MySQL5 database:
 
bc. db=mysql:user:pwd@database_name

To reuse an existing Datasource from your application server:

bc. db=java:/comp/env/jdbc/myDatasource@

If you specify a @Datasource@, the database plugin detects the pattern @db=java:@ and will de-activate the default JDBC system.

Default: none.


h3(#db.destroyMethod). db.destroyMethod

A generic ‘destroy’ method name. When using an existing Datasource, this is sometimes needed to destroy it when the application is stopped. For example:

bc. db.destroyMethod=close


h3(#db.driver). db.driver

Database driver class name, for use with "db.url":#db.url. For example:

bc. db.driver=org.postgresql.Driver


h3(#db.pass). db.pass

Database connection password, used with "db.url":#db.url.


h3(#db.pool.maxSize). db.pool.maxSize

Connection pool maximum size. For example:

bc. db.pool.maxSize=30


h3(#db.pool.minSize). db.pool.minSize

Connection pool minimum size. For example:

bc. db.pool.minSize=10


h3(#db.pool.timeout). db.pool.timeout

Connection pool time-out. For example:

bc. db.pool.timeout=1000


h3(#db.url). db.url

A full JDBC configuration, in combination with "db.user":#db.user, "db.pass":#db.pass and "db.driver":#db.driver. For example:

bc. db.url=jdbc:postgresql:database_name


h3(#db.user). db.user

Database connection user name, used with "db.url":#db.url.


h2(#hibernate). Hibernate

You can specify additional hibernate properties. For example, to enable SQL comments:

bc. hibernate.use_sql_comments=true


h2(#http). Server configuration


h3(#http.address). http.address

HTTP listener address, to restrict addresses the server listens on. For example:

bc. http.address=127.0.0.1

Default: the server listens for HTTP on the wilcard address.
 

h3(#http.cacheControl). http.cacheControl

HTTP Response headers control for static files: sets the default max-age in seconds, telling the user’s browser how long it should cache the page. This is only read in @prod@ mode, in @dev@ mode the cache is disabled. For example, to send @no-cache@:

bc. http.cacheControl=0

Default: @3600@ - set cache expiry to one hour.


h3(#http.path). http.path

The URL path where the application runs on the server: use this if you do not host your Play application at the root of the domain you’re serving it from. This parameter has no effect when deployed as a WAR, because the path will be handled by the application server. For example:

bc. http.path=/myapp/

Default: @/@


h3(#http.port). http.port

The port that the HTTP server listens on. 

Default: @9000@


h3(#http.proxyHost). http.proxyHost

Proxy server for web services requests. For example:

bc. http.proxyHost=localhost


h3(#http.proxyPort). http.proxyPort 

Proxy port for web services requests. For example:

bc. http.proxyPort=3128


h3(#http.proxyUser). http.proxyUser 

Proxy user for web services requests.


h3(#http.proxyPassword). http.proxyPassword 

Proxy password for web services requests.


h3(#http.useETag). http.useETag

If enabled, Play will generate entity tags automatically and send a 304 when needed. For example, to deactivate use of entity tags:

bc. http.useETag=false

Default: @true@


h2(#java). Java source


h3(#java.source). java.source

Java source level. For example:

bc. java.source=1.5

Values:  @1.5@, @1.6@, @1.7@ (experimental).


h2(#jpa). JPA


h3(#jpa.dialect). jpa.dialect

Specify the custom JPA dialect to use here. For exmaple:

bc. jpa.dialect=org.hibernate.dialect.PostgreSQLDialect

Default: Play will guess the dialect.


h3(#jpa.ddl). jpa.ddl

Specify the DDL generation pattern to use. For example, to disable database structure updates, useful for @prod@ mode:

bc. jpa.ddl=none

To enable automatic database updates, useful for @dev@ mode:

bc. jpa.ddl=update


h3(#jpa.debugSQL). jpa.debugSQL

Debug SQL statements (logged using DEBUG level). For example:

bc. jpa.debugSQL=true


h2(#jpda). JVM


h3(#jpda.port). jpda.port

Defines which port is used by JPDA when application is in debug mode. For example:

Default: @8000@


h2(#memcachedconfig). Memcached


h3(#memcached). memcached

Enable "Memcached":http://www.danga.com/memcached/; if you don’t configure Memcached, Play will use a standalone cache that stores data in the JVM heap.

bc. memcached=enabled

See also: "using a cache":cache.


h3(#memcached.host). memcached.host

Specify memcached host. For example:

bc. memcached.host=127.0.0.1:11211

Default: @127.0.0.1:11211@

You can specify multiple hosts to build a distributed cache. For example:

bc. memcached.1.host=127.0.0.1:11211
memcached.2.host=127.0.0.1:11212


h2(#mimetype). Custom mime types

You can declare additional MIME types. For example: 

bc. mimetype.xpi=application/x-xpinstall


h2(#webserviceconfig). Web services

h3(#webservice). webservice

Web services configuration. For example, to use the JDK’s internal implementation:

bc. webservice=urlfetch

Default: the engine is Async Http Client. 


h2(#mail). Mail


h3(#mail.debug). mail.debug

Enables SMTP transaction logging.

bc. mail.debug=true

h3(#mail.smtp). mail.smtp

Simple mail configuration key.

Default: @mock@ - use a mock Mailer

See also: "SMTP configuration":emails#smtp.


h3(#mail.smtp.channel). mail.smtp.channel

SMTP encrypted channel configuration, used with "mail.smtp.host":#mail.smtp.host. Values:

* @ssl@ - SMTP-over-SSL (SMTPS) connector; an SSL socket listening on port 465
* @starttls@ - a clear connection on port 25 that will switch to SSL/TLS, if your server supports the @starttls@ command (see: "RFC 2487":http://www.apps.ietf.org/rfc/rfc2487.html).


h3(#mail.smtp.host). mail.smtp.host

Outgoing mail server. For example:

bc. mail.smtp.host=127.0.0.1

To use a GMail SMTP server:

bc. mail.smtp.host=smtp.gmail.com


h3(#mail.smtp.socketFactory.class). mail.smtp.socketFactory.class

When using SSL connections with JavaMail, the default SSL behavior is to drop the connection if the remote server certificate is not signed by a root certificate. This is the case in particular when using a self-signed certificate. Play’s default behavior is to skip that check. You can control this using this property.


h3(#mail.smtp.pass). mail.smtp.pass

SMTP server password, used with "mail.smtp.host":#mail.smtp.host, e.g. a GMail password.


h3(#mail.smtp.port). mail.smtp.port

Port for SMTP server connections, used to override the defaults. For example:

bc. mail.smtp.port=2500


h3(#mail.smtp.user). mail.smtp.user

SMTP server user name, used with "mail.smtp.host":#mail.smtp.host, e.g. a GMail user name.


h2(#play). Play run-time


h3(#play.editor). play.editor

Open file from error pages. If your text editor supports opening files by URL, Play will dynamically link error pages to files. For Textmate, for example:

bc. play.editor=txmt://open?url=file://%s&line=%s


h3(#play.jobs.pool). play.jobs.pool

Size of the Jobs pool. For example:

bc. play.jobs.pool=10


h3(#play.pool). play.pool

Execution pool size. Try to keep this as low as possible. Setting this to 1 thread will serialize all requests (very useful for debugging purpose). For example:

bc. play.pool=10

Default: @1@ (in @dev@ mode), number of processors + 1 (in @prod@ mode).
